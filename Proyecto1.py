# -*- coding: utf-8 -*-
"""Copia de Copy of Proyecto1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N4PvNAeV9G6DEDckuO0RvbnvGxYjVnB6

# Proyecto #1
"""

# import libraries
import random
from math import exp, pow, factorial, log
from scipy.stats import poisson
import numpy as np
import simpy

from matplotlib import animation
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation


"""Globals"""
#globar variables
CHECKOUT_CLIENT_HOUR = 100 # Total clients/hour in the supermarket
clients = 0 # clients couter
busy_time = 0 # busy_time couter
iddle_time = 0  # iddle_time couter
waiting_time = 0 # waiting_time couter
finish_time = 0 # finish_time couter

# number of cashiers
NUM_QUEUE = 5

#list for the cashiers grafics
lista_de_cajas = []
axis_x = []

i = 0
# create axis for the grafics simulation
while i < NUM_QUEUE:
  #lista_de_cajas.append([])
  axis_x.append("Caja " + str(i + 1))
  i += 1

#cashier model
class Caja:

  CLIENT_HOUR = 20 # Clients per hour attended in a checkout

  def __init__(self, env):
    self.env = env
    self.queue = [simpy.Resource(self.env, capacity=1) for _ in range(NUM_QUEUE)] # create num_queue simpy Resources
    self.queue_capacity = [0 for _ in range(NUM_QUEUE)] # set inital capacity for Resources
  
  # function that simulates attending a client
  def atender_cliente(self, cliente):
    global busy_time
    beta = 1 / self.CLIENT_HOUR
    process_time = np.random.exponential(beta)
    busy_time += process_time
    yield self.env.timeout(process_time)
    print(f"[{self.env.now:.2f}] Client {cliente} done in {process_time * 60} mins")

"""## Client request"""
# function that simulates  a client making a request
def client(env, client_id, caja):
  global clients
  global waiting_time
  global finish_time

  t_start = env.now
  print(f"[{env.now:.2f}] Client {client_id} waiting in queue...")

  caja_index = caja.queue_capacity.index(min(caja.queue_capacity))
  choices = []

  for i in range(NUM_QUEUE):
    if caja.queue_capacity[i] == min(caja.queue_capacity):
      choices.append(i)

  caja_index = random.choice(choices)

  with caja.queue[caja_index].request() as req:
    caja.queue_capacity[caja_index] += 1
    # plot the simulation
    plt.ylim(0, caja.CLIENT_HOUR/NUM_QUEUE + 2)

    plt.bar(axis_x, caja.queue_capacity, color = 'green')
    plt.pause(0.01)

    yield req
    t_end = env.now
    print(f"[{env.now:.2f}] Client {client_id} is being attended at checkout {caja_index}")

    caja.queue_capacity[caja_index] -= 1

    plt.bar(axis_x, caja.queue_capacity, color = 'green')
    plt.pause(0.01)
    
    yield env.process(caja.atender_cliente(client_id))
    print(f"[{env.now:.2f}] Client {client_id} leaving checkout {caja_index}")
    finish_time = env.now
    clients += 1
    waiting_time += t_end - t_start

def poissonMedTime(x, lambda_val):
  return -(log(1 - x) / lambda_val)

"""## Set up"""
# function that set uo the enviorment with the time intervals
def setup(env, caja):
  client_id = 0

  while True:
    clients_interval = poissonMedTime(random.random(), CHECKOUT_CLIENT_HOUR)
    yield env.timeout(clients_interval)
    env.process(client(env, client_id, caja))
    client_id += 1

"""## Run simulationn"""

#Clean globals
clients = 0
busy_time = 0
iddle_time = 0
waiting_time = 0
caja_request = 0


## begin proyect
env = simpy.Environment()

caja = Caja(env)

env.process(setup(env, caja))
env.run(until=1)

plt.show()

print("GRADO DE UTILIZACIONDE CADA CAJERO: ", clients/NUM_QUEUE)
print("CLIENTS  : ", clients)
print("CLIENTS MEAN WAITING TIME: ", waiting_time / clients)
print("NUMBER OF CLIENTS IN QUEUE PER HOUR: ", (1 / (waiting_time / clients)) if waiting_time > 0 else 0)